name: github-action-PowerShell
run-name: ${{ github.actor }} GitHub Actions PowerShell Measure-Command on ubuntu and windows
on: [push]
jobs:
  # job name
  Explore-System-Environment:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Check OS
        run: echo "Running on ${{ runner.os }}"
      
      # Ubuntu step: Upgrade PowerShell using Homebrew
      - name: Setup Homebrew on Ubuntu
        continue-on-error: true
        uses: Homebrew/actions/setup-homebrew@master
        if: runner.os == 'Linux'

      - name: Upgrade PowerShell on Ubuntu
        continue-on-error: true
        if: runner.os == 'Linux'
        run: |
          cat /etc/os-release
          source /etc/os-release
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh --version

      # Windows step: Upgrade PowerShell using Chocolatey
      - name: Upgrade PowerShell on Windows
        continue-on-error: true
        if: runner.os == 'Windows'
        run: |
          choco upgrade powershell-core --version 7.5.0
          pwsh --version

      # Step 2: Run tests
      - name: Run Measure-Command testing
        continue-on-error: true
        shell: pwsh
        run: |
          Write-Host "Hello from PowerShell on ${{ matrix.os }}!"
          $host | select name,version
          [int]$upperBound = 10000
          Measure-Command { $items = @(); foreach ($i in 0..($upperBound)) { $items += $i } } | Select-Object TotalMilliseconds | Out-String
          Measure-Command { $items = foreach ($i in 0..($upperBound)) { $i } } | Select-Object TotalMilliseconds | Out-String
          Measure-Command { $items = [System.Collections.Generic.List[int]]::new(); foreach ($i in 0..($upperBound)) { $items.Add($i) } } | Select-Object TotalMilliseconds | Out-String
        # job to always continue processing even if there are test failures
        #[System.Environment]::OSVersion.Platform
