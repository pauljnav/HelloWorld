<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>Pester.Run</T>
      <T>System.Object</T>
    </TN>
    <ToString>[+] Pester</ToString>
    <Props>
      <Obj N="Containers" RefId="1">
        <TN RefId="1">
          <T>System.Collections.Generic.List`1[[Pester.Container, Pester, Version=5.6.1.0, Culture=neutral, PublicKeyToken=null]]</T>
          <T>System.Object</T>
        </TN>
        <LST>
          <Obj RefId="2">
            <TN RefId="2">
              <T>Pester.Container</T>
              <T>System.Object</T>
            </TN>
            <ToString>[+] C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests\helloWorld.Tests.ps1</ToString>
            <Props>
              <S N="Name">C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests\helloWorld.Tests.ps1</S>
              <S N="Type">File</S>
              <Obj N="Item" RefId="3">
                <S>C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests\helloWorld.Tests.ps1</S>
                <MS>
                  <S N="PSPath">Microsoft.PowerShell.Core\FileSystem::C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests\helloWorld.Tests.ps1</S>
                  <S N="PSParentPath">Microsoft.PowerShell.Core\FileSystem::C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests</S>
                  <S N="PSChildName">helloWorld.Tests.ps1</S>
                  <S N="PSDrive">C</S>
                  <S N="PSProvider">Microsoft.PowerShell.Core\FileSystem</S>
                  <B N="PSIsContainer">false</B>
                  <S N="UnresolvedPath">C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests\helloWorld.Tests.ps1</S>
                </MS>
              </Obj>
              <Obj N="Data" RefId="4">
                <TN RefId="3">
                  <T>System.Collections.Hashtable</T>
                  <T>System.Object</T>
                </TN>
                <DCT />
              </Obj>
              <Obj N="Blocks" RefId="5">
                <TN RefId="4">
                  <T>System.Collections.Generic.List`1[[Pester.Block, Pester, Version=5.6.1.0, Culture=neutral, PublicKeyToken=null]]</T>
                  <T>System.Object</T>
                </TN>
                <LST>
                  <S>[+] Invoke-HelloWorld</S>
                </LST>
              </Obj>
              <S N="Result">Passed</S>
              <TS N="Duration">PT0.0312159S</TS>
              <I32 N="FailedCount">0</I32>
              <I32 N="PassedCount">1</I32>
              <I32 N="SkippedCount">0</I32>
              <I32 N="InconclusiveCount">0</I32>
              <I32 N="NotRunCount">0</I32>
              <I32 N="TotalCount">1</I32>
              <Obj N="ErrorRecord" RefId="6">
                <TN RefId="5">
                  <T>System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                  <T>System.Object</T>
                </TN>
                <LST />
              </Obj>
              <B N="Passed">true</B>
              <B N="OwnPassed">true</B>
              <B N="Skip">false</B>
              <B N="ShouldRun">true</B>
              <B N="Executed">true</B>
              <DT N="ExecutedAt">2025-02-07T00:40:03.2648387+00:00</DT>
              <TS N="DiscoveryDuration">PT0.0017818S</TS>
              <TS N="UserDuration">PT0.0031484S</TS>
              <TS N="FrameworkDuration">PT0.0262857S</TS>
              <Nil N="StandardOutput" />
            </Props>
          </Obj>
        </LST>
      </Obj>
      <S N="Result">Passed</S>
      <I32 N="FailedCount">0</I32>
      <I32 N="FailedBlocksCount">0</I32>
      <I32 N="FailedContainersCount">0</I32>
      <I32 N="PassedCount">1</I32>
      <I32 N="SkippedCount">0</I32>
      <I32 N="InconclusiveCount">0</I32>
      <I32 N="NotRunCount">0</I32>
      <I32 N="TotalCount">1</I32>
      <TS N="Duration">PT0.0312159S</TS>
      <B N="Executed">true</B>
      <DT N="ExecutedAt">2025-02-07T00:40:03.2415834+00:00</DT>
      <S N="Version">5.6.1</S>
      <S N="PSVersion">7.4.5</S>
      <Obj N="PSBoundParameters" RefId="7">
        <TN RefId="6">
          <T>System.Management.Automation.PSBoundParametersDictionary</T>
          <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
          <T>System.Object</T>
        </TN>
        <DCT>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="8">
              <TN RefId="7">
                <T>System.Management.Automation.SwitchParameter</T>
                <T>System.ValueType</T>
                <T>System.Object</T>
              </TN>
              <ToString>True</ToString>
              <Props>
                <B N="IsPresent">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="9">
              <TN RefId="8">
                <T>System.String[]</T>
                <T>System.Array</T>
                <T>System.Object</T>
              </TN>
              <LST>
                <S>C:\MyDocs\MyGIT\reposPN\HelloWorld\Tests\helloWorld.Tests.ps1</S>
              </LST>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Nil N="Plugins" />
      <Nil N="PluginConfiguration" />
      <Nil N="PluginData" />
      <Obj N="Configuration" RefId="10">
        <TN RefId="9">
          <T>PesterConfiguration</T>
          <T>System.Object</T>
        </TN>
        <ToString>PesterConfiguration</ToString>
        <Props>
          <Obj N="Run" RefId="11">
            <TN RefId="10">
              <T>Pester.RunConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>Run configuration.</ToString>
            <Props>
              <Obj N="Path" RefId="12">
                <TN RefId="11">
                  <T>Pester.StringArrayOption</T>
                  <T>Pester.Option`1[[System.String[], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                  <T>Pester.Option</T>
                  <T>System.Object</T>
                </TN>
                <ToString>Directories to be searched for tests, paths directly to test files, or combination of both. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="13">
                    <TNRef RefId="8" />
                    <LST>
                      <S>.</S>
                    </LST>
                  </Obj>
                  <S N="Description">Directories to be searched for tests, paths directly to test files, or combination of both.</S>
                  <Ref N="Value" RefId="9" />
                  <B N="IsModified">true</B>
                </Props>
              </Obj>
              <Obj N="ExcludePath" RefId="14">
                <TNRef RefId="11" />
                <ToString>Directories or files to be excluded from the run. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="15">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Directories or files to be excluded from the run.</S>
                  <Ref N="Value" RefId="15" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="ScriptBlock" RefId="16">
                <TN RefId="12">
                  <T>Pester.ScriptBlockArrayOption</T>
                  <T>Pester.Option`1[[System.Management.Automation.ScriptBlock[], System.Management.Automation, Version=7.4.5.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
                  <T>Pester.Option</T>
                  <T>System.Object</T>
                </TN>
                <ToString>ScriptBlocks containing tests to be executed. (System.Management.Automation.ScriptBlock[], default: System.Management.Automation.ScriptBlock[])</ToString>
                <Props>
                  <Obj N="Default" RefId="17">
                    <TN RefId="13">
                      <T>System.Management.Automation.ScriptBlock[]</T>
                      <T>System.Array</T>
                      <T>System.Object</T>
                    </TN>
                    <LST />
                  </Obj>
                  <S N="Description">ScriptBlocks containing tests to be executed.</S>
                  <Ref N="Value" RefId="17" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="Container" RefId="18">
                <TN RefId="14">
                  <T>Pester.ContainerInfoArrayOption</T>
                  <T>Pester.Option`1[[Pester.ContainerInfo[], Pester, Version=5.6.1.0, Culture=neutral, PublicKeyToken=null]]</T>
                  <T>Pester.Option</T>
                  <T>System.Object</T>
                </TN>
                <ToString>ContainerInfo objects containing tests to be executed. (Pester.ContainerInfo[], default: Pester.ContainerInfo[])</ToString>
                <Props>
                  <Obj N="Default" RefId="19">
                    <TN RefId="15">
                      <T>Pester.ContainerInfo[]</T>
                      <T>System.Array</T>
                      <T>System.Object</T>
                    </TN>
                    <LST />
                  </Obj>
                  <S N="Description">ContainerInfo objects containing tests to be executed.</S>
                  <Ref N="Value" RefId="19" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="TestExtension" RefId="20">
                <TN RefId="16">
                  <T>Pester.StringOption</T>
                  <T>Pester.Option`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                  <T>Pester.Option</T>
                  <T>System.Object</T>
                </TN>
                <ToString>Filter used to identify test files. (.Tests.ps1, default: .Tests.ps1)</ToString>
                <Props>
                  <S N="Default">.Tests.ps1</S>
                  <S N="Description">Filter used to identify test files.</S>
                  <S N="Value">.Tests.ps1</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="Exit" RefId="21">
                <TN RefId="17">
                  <T>Pester.BoolOption</T>
                  <T>Pester.Option`1[[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                  <T>Pester.Option</T>
                  <T>System.Object</T>
                </TN>
                <ToString>Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Exit with non-zero exit code when the test run fails. Exit code is always set to `$LASTEXITCODE` even when this option is `$false`. When used together with Throw, throwing an exception is preferred.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="Throw" RefId="22">
                <TNRef RefId="17" />
                <ToString>Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Throw an exception when test run fails. When used together with Exit, throwing an exception is preferred.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="PassThru" RefId="23">
                <TNRef RefId="17" />
                <ToString>Return result object to the pipeline after finishing the test run. (True, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Return result object to the pipeline after finishing the test run.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">true</B>
                </Props>
              </Obj>
              <Obj N="SkipRun" RefId="24">
                <TNRef RefId="17" />
                <ToString>Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Runs the discovery phase but skips run. Use it with PassThru to get object populated with all tests.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="SkipRemainingOnFailure" RefId="25">
                <TNRef RefId="16" />
                <ToString>Skips remaining tests after failure for selected scope, options are None, Run, Container and Block. (None, default: None)</ToString>
                <Props>
                  <S N="Default">None</S>
                  <S N="Description">Skips remaining tests after failure for selected scope, options are None, Run, Container and Block.</S>
                  <S N="Value">None</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="Filter" RefId="26">
            <TN RefId="18">
              <T>Pester.FilterConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>Filter configuration</ToString>
            <Props>
              <Obj N="Tag" RefId="27">
                <TNRef RefId="11" />
                <ToString>Tags of Describe, Context or It to be run. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="28">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Tags of Describe, Context or It to be run.</S>
                  <Ref N="Value" RefId="28" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="ExcludeTag" RefId="29">
                <TNRef RefId="11" />
                <ToString>Tags of Describe, Context or It to be excluded from the run. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="30">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Tags of Describe, Context or It to be excluded from the run.</S>
                  <Ref N="Value" RefId="30" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="Line" RefId="31">
                <TNRef RefId="11" />
                <ToString>Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\tests\file1.Tests.ps1:37' (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="32">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Filter by file and scriptblock start line, useful to run parsed tests programmatically to avoid problems with expanded names. Example: 'C:\tests\file1.Tests.ps1:37'</S>
                  <Ref N="Value" RefId="32" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="ExcludeLine" RefId="33">
                <TNRef RefId="11" />
                <ToString>Exclude by file and scriptblock start line, takes precedence over Line. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="34">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Exclude by file and scriptblock start line, takes precedence over Line.</S>
                  <Ref N="Value" RefId="34" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="FullName" RefId="35">
                <TNRef RefId="11" />
                <ToString>Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1' (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="36">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'</S>
                  <Ref N="Value" RefId="36" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="CodeCoverage" RefId="37">
            <TN RefId="19">
              <T>Pester.CodeCoverageConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>CodeCoverage configuration.</ToString>
            <Props>
              <Obj N="Enabled" RefId="38">
                <TNRef RefId="17" />
                <ToString>Enable CodeCoverage. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Enable CodeCoverage.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="OutputFormat" RefId="39">
                <TNRef RefId="16" />
                <ToString>Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters (JaCoCo, default: JaCoCo)</ToString>
                <Props>
                  <S N="Default">JaCoCo</S>
                  <S N="Description">Format to use for code coverage report. Possible values: JaCoCo, CoverageGutters</S>
                  <S N="Value">JaCoCo</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="OutputPath" RefId="40">
                <TNRef RefId="16" />
                <ToString>Path relative to the current directory where code coverage report is saved. (coverage.xml, default: coverage.xml)</ToString>
                <Props>
                  <S N="Default">coverage.xml</S>
                  <S N="Description">Path relative to the current directory where code coverage report is saved.</S>
                  <S N="Value">coverage.xml</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="OutputEncoding" RefId="41">
                <TNRef RefId="16" />
                <ToString>Encoding of the output file. (UTF8, default: UTF8)</ToString>
                <Props>
                  <S N="Default">UTF8</S>
                  <S N="Description">Encoding of the output file.</S>
                  <S N="Value">UTF8</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="Path" RefId="42">
                <TNRef RefId="11" />
                <ToString>Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="43">
                    <TNRef RefId="8" />
                    <LST />
                  </Obj>
                  <S N="Description">Directories or files to be used for code coverage, by default the Path(s) from general settings are used, unless overridden here.</S>
                  <Ref N="Value" RefId="43" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="ExcludeTests" RefId="44">
                <TNRef RefId="17" />
                <ToString>Exclude tests from code coverage. This uses the TestFilter from general configuration. (True, default: True)</ToString>
                <Props>
                  <B N="Default">true</B>
                  <S N="Description">Exclude tests from code coverage. This uses the TestFilter from general configuration.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="RecursePaths" RefId="45">
                <TNRef RefId="17" />
                <ToString>Will recurse through directories in the Path option. (True, default: True)</ToString>
                <Props>
                  <B N="Default">true</B>
                  <S N="Description">Will recurse through directories in the Path option.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="CoveragePercentTarget" RefId="46">
                <TN RefId="20">
                  <T>Pester.DecimalOption</T>
                  <T>Pester.Option`1[[System.Decimal, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                  <T>Pester.Option</T>
                  <T>System.Object</T>
                </TN>
                <ToString>Target percent of code coverage that you want to achieve, default 75%. (75, default: 75)</ToString>
                <Props>
                  <D N="Default">75</D>
                  <S N="Description">Target percent of code coverage that you want to achieve, default 75%.</S>
                  <D N="Value">75</D>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="UseBreakpoints" RefId="47">
                <TNRef RefId="17" />
                <ToString>EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints. (True, default: True)</ToString>
                <Props>
                  <B N="Default">true</B>
                  <S N="Description">EXPERIMENTAL: When false, use Profiler based tracer to do CodeCoverage instead of using breakpoints.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="SingleHitBreakpoints" RefId="48">
                <TNRef RefId="17" />
                <ToString>Remove breakpoint when it is hit. (True, default: True)</ToString>
                <Props>
                  <B N="Default">true</B>
                  <S N="Description">Remove breakpoint when it is hit.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="TestResult" RefId="49">
            <TN RefId="21">
              <T>Pester.TestResultConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>TestResult configuration.</ToString>
            <Props>
              <Obj N="Enabled" RefId="50">
                <TNRef RefId="17" />
                <ToString>Enable TestResult. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Enable TestResult.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="OutputFormat" RefId="51">
                <TNRef RefId="16" />
                <ToString>Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml (NUnitXml, default: NUnitXml)</ToString>
                <Props>
                  <S N="Default">NUnitXml</S>
                  <S N="Description">Format to use for test result report. Possible values: NUnitXml, NUnit2.5, NUnit3 or JUnitXml</S>
                  <S N="Value">NUnitXml</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="OutputPath" RefId="52">
                <TNRef RefId="16" />
                <ToString>Path relative to the current directory where test result report is saved. (testResults.xml, default: testResults.xml)</ToString>
                <Props>
                  <S N="Default">testResults.xml</S>
                  <S N="Description">Path relative to the current directory where test result report is saved.</S>
                  <S N="Value">testResults.xml</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="OutputEncoding" RefId="53">
                <TNRef RefId="16" />
                <ToString>Encoding of the output file. (UTF8, default: UTF8)</ToString>
                <Props>
                  <S N="Default">UTF8</S>
                  <S N="Description">Encoding of the output file.</S>
                  <S N="Value">UTF8</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="TestSuiteName" RefId="54">
                <TNRef RefId="16" />
                <ToString>Set the name assigned to the root 'test-suite' element. (Pester, default: Pester)</ToString>
                <Props>
                  <S N="Default">Pester</S>
                  <S N="Description">Set the name assigned to the root 'test-suite' element.</S>
                  <S N="Value">Pester</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="Should" RefId="55">
            <TN RefId="22">
              <T>Pester.ShouldConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>Should configuration.</ToString>
            <Props>
              <Obj N="ErrorAction" RefId="56">
                <TNRef RefId="16" />
                <ToString>Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test. (Stop, default: Stop)</ToString>
                <Props>
                  <S N="Default">Stop</S>
                  <S N="Description">Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test.</S>
                  <S N="Value">Stop</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="Debug" RefId="57">
            <TN RefId="23">
              <T>Pester.DebugConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>Debug configuration for Pester. ⚠ Use at your own risk!</ToString>
            <Props>
              <Obj N="ShowFullErrors" RefId="58">
                <TNRef RefId="17" />
                <ToString>Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Show full errors including Pester internal stack. This property is deprecated, and if set to true it will override Output.StackTraceVerbosity to 'Full'.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="WriteDebugMessages" RefId="59">
                <TNRef RefId="17" />
                <ToString>Write Debug messages to screen. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Write Debug messages to screen.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="WriteDebugMessagesFrom" RefId="60">
                <TNRef RefId="11" />
                <ToString>Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything. (System.String[], default: System.String[])</ToString>
                <Props>
                  <Obj N="Default" RefId="61">
                    <TNRef RefId="8" />
                    <LST>
                      <S>Discovery</S>
                      <S>Skip</S>
                      <S>Mock</S>
                      <S>CodeCoverage</S>
                    </LST>
                  </Obj>
                  <S N="Description">Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything.</S>
                  <Ref N="Value" RefId="61" />
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="ShowNavigationMarkers" RefId="62">
                <TNRef RefId="17" />
                <ToString>Write paths after every block and test, for easy navigation in VSCode. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Write paths after every block and test, for easy navigation in VSCode.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="ReturnRawResultObject" RefId="63">
                <TNRef RefId="17" />
                <ToString>Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice. (False, default: False)</ToString>
                <Props>
                  <B N="Default">false</B>
                  <S N="Description">Returns unfiltered result object, this is for development only. Do not rely on this object for additional properties, non-public properties will be renamed without previous notice.</S>
                  <B N="Value">false</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="Output" RefId="64">
            <TN RefId="24">
              <T>Pester.OutputConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>Output configuration</ToString>
            <Props>
              <Obj N="Verbosity" RefId="65">
                <TNRef RefId="16" />
                <ToString>The verbosity of output, options are None, Normal, Detailed and Diagnostic. (Normal, default: Normal)</ToString>
                <Props>
                  <S N="Default">Normal</S>
                  <S N="Description">The verbosity of output, options are None, Normal, Detailed and Diagnostic.</S>
                  <S N="Value">Normal</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="StackTraceVerbosity" RefId="66">
                <TNRef RefId="16" />
                <ToString>The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full. (Filtered, default: Filtered)</ToString>
                <Props>
                  <S N="Default">Filtered</S>
                  <S N="Description">The verbosity of stacktrace output, options are None, FirstLine, Filtered and Full.</S>
                  <S N="Value">Filtered</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="CIFormat" RefId="67">
                <TNRef RefId="16" />
                <ToString>The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions. (None, default: Auto)</ToString>
                <Props>
                  <S N="Default">Auto</S>
                  <S N="Description">The CI format of error output in build logs, options are None, Auto, AzureDevops and GithubActions.</S>
                  <S N="Value">None</S>
                  <B N="IsModified">true</B>
                </Props>
              </Obj>
              <Obj N="CILogLevel" RefId="68">
                <TNRef RefId="16" />
                <ToString>The CI log level in build logs, options are Error and Warning. (Error, default: Error)</ToString>
                <Props>
                  <S N="Default">Error</S>
                  <S N="Description">The CI log level in build logs, options are Error and Warning.</S>
                  <S N="Value">Error</S>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
              <Obj N="RenderMode" RefId="69">
                <TNRef RefId="16" />
                <ToString>The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext. (Ansi, default: Auto)</ToString>
                <Props>
                  <S N="Default">Auto</S>
                  <S N="Description">The mode used to render console output, options are Auto, Ansi, ConsoleColor and Plaintext.</S>
                  <S N="Value">Ansi</S>
                  <B N="IsModified">true</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="TestDrive" RefId="70">
            <TN RefId="25">
              <T>Pester.TestDriveConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>TestDrive configuration.</ToString>
            <Props>
              <Obj N="Enabled" RefId="71">
                <TNRef RefId="17" />
                <ToString>Enable TestDrive. (True, default: True)</ToString>
                <Props>
                  <B N="Default">true</B>
                  <S N="Description">Enable TestDrive.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
          <Obj N="TestRegistry" RefId="72">
            <TN RefId="26">
              <T>Pester.TestRegistryConfiguration</T>
              <T>Pester.ConfigurationSection</T>
              <T>System.Object</T>
            </TN>
            <ToString>TestRegistry configuration.</ToString>
            <Props>
              <Obj N="Enabled" RefId="73">
                <TNRef RefId="17" />
                <ToString>Enable TestRegistry. (True, default: True)</ToString>
                <Props>
                  <B N="Default">true</B>
                  <S N="Description">Enable TestRegistry.</S>
                  <B N="Value">true</B>
                  <B N="IsModified">false</B>
                </Props>
              </Obj>
            </Props>
          </Obj>
        </Props>
      </Obj>
      <TS N="DiscoveryDuration">PT0.0017818S</TS>
      <TS N="UserDuration">PT0.0031484S</TS>
      <TS N="FrameworkDuration">PT0.0262857S</TS>
      <Obj N="Failed" RefId="74">
        <TN RefId="27">
          <T>System.Collections.Generic.List`1[[Pester.Test, Pester, Version=5.6.1.0, Culture=neutral, PublicKeyToken=null]]</T>
          <T>System.Object</T>
        </TN>
        <LST />
      </Obj>
      <Obj N="FailedBlocks" RefId="75">
        <TNRef RefId="4" />
        <LST />
      </Obj>
      <Obj N="FailedContainers" RefId="76">
        <TNRef RefId="1" />
        <LST />
      </Obj>
      <Obj N="Passed" RefId="77">
        <TNRef RefId="27" />
        <LST>
          <Obj RefId="78">
            <TN RefId="28">
              <T>Pester.Test</T>
              <T>System.Object</T>
            </TN>
            <ToString>[+] Checks module for expected values</ToString>
            <Props>
              <S N="Name">Checks module for expected values</S>
              <Obj N="Path" RefId="79">
                <TN RefId="29">
                  <T>System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
                  <T>System.Object</T>
                </TN>
                <LST>
                  <S>Invoke-HelloWorld</S>
                  <S>Checks module for expected values</S>
                </LST>
              </Obj>
              <Nil N="Data" />
              <S N="ExpandedName">Checks module for expected values</S>
              <S N="ExpandedPath">Invoke-HelloWorld.Checks module for expected values</S>
              <S N="Result">Passed</S>
              <Obj N="ErrorRecord" RefId="80">
                <TNRef RefId="5" />
                <LST />
              </Obj>
              <Nil N="StandardOutput" />
              <TS N="Duration">PT0.0030493S</TS>
              <S N="ItemType">Test</S>
              <S N="Id"></S>
              <S N="GroupId"></S>
              <SBK N="ScriptBlock">_x000D__x000A_    Invoke-HelloWorld | Should -Be -ExpectedValue "Hello World!"_x000D__x000A_    Invoke-HelloWorld -reply "foo bar" | Should -Be -ExpectedValue "foo bar"_x000D__x000A_  </SBK>
              <Nil N="Tag" />
              <B N="Focus">false</B>
              <B N="Skip">false</B>
              <S N="Block">[+] Invoke-HelloWorld</S>
              <B N="First">true</B>
              <B N="Last">true</B>
              <B N="Include">false</B>
              <B N="Exclude">false</B>
              <B N="Explicit">false</B>
              <B N="ShouldRun">true</B>
              <I32 N="StartLine">11</I32>
              <B N="Executed">true</B>
              <DT N="ExecutedAt">2025-02-07T00:40:03.2731789+00:00</DT>
              <B N="Passed">true</B>
              <B N="Skipped">false</B>
              <B N="Inconclusive">false</B>
              <TS N="UserDuration">PT0.0016784S</TS>
              <TS N="FrameworkDuration">PT0.0013709S</TS>
              <Nil N="PluginData" />
              <Nil N="FrameworkData" />
            </Props>
          </Obj>
        </LST>
      </Obj>
      <Obj N="Skipped" RefId="81">
        <TNRef RefId="27" />
        <LST />
      </Obj>
      <Obj N="Inconclusive" RefId="82">
        <TNRef RefId="27" />
        <LST />
      </Obj>
      <Obj N="NotRun" RefId="83">
        <TNRef RefId="27" />
        <LST />
      </Obj>
      <Obj N="Tests" RefId="84">
        <TNRef RefId="27" />
        <LST>
          <Ref RefId="78" />
        </LST>
      </Obj>
      <Nil N="CodeCoverage" />
    </Props>
  </Obj>
</Objs>